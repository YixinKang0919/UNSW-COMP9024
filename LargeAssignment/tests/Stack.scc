////////////////////////////////////////////////////////////////////////////////////////
// Stack:
//
//                -----------------------
//                FieldName  FieldOffset                                     pItems[size-1]
//                -----------------------                                       ...
//  pStack -----> size         0                                             pItems[2]
//                top          8                                             pItems[1]
//                pItems      16           ----------------------------->    pItems[0]
//                -----------------------
//                    Heap Space                                             Heap Space
//
//
//
// In C:   // See COMP9024/Tutorials/Week3/src/Stack.c
//      struct Stack {
//          // the current capacity size of a stack, in the number of items, not in bytes
//          long size;
//          // the stack top position
//          long top;
//          // pItems points to an array dynamically allocated in heap
//          STACK_ITEM_T *pItems;
//      };
//
// In SCC:
//      We only have integers in our current implementation, but it is still possible
//      to allocate a heap object and treat it as a struct Stack object.
//      No high-level human-friendly symbols for struct field names.
//      Let us face the low-level field offsets and pointer arithmetic directly.
//
////////////////////////////////////////////////////////////////////////////////////////

// pStack->size
StackGetSize(pStack) { 
    return SccRead64(pStack, 0); 
}

// pStack->size = size
StackSetSize(pStack, size) { 
    SccWrite64(pStack, 0, size); 
}

// pStack->top
StackGetTop(pStack) { 
    return SccRead64(pStack, 8); 
}

// pStack->top = top
StackSetTop(pStack, top) { 
    SccWrite64(pStack, 8, top); 
}

// pStack->pItems
StackGetItems(pStack) { 
    return SccRead64(pStack, 16); 
}

// stack->pItems = pItems
StackSetItems(pStack, pItems) { 
    SccWrite64(pStack, 16, pItems); 
}

ReleaseStack(pStack) {
    long pItems;

    pItems = StackGetItems(pStack);
    SccFree(pItems);
    SccFree(pStack);
}

CreateStack() {
    long pStack;
    long pItems;
    long size;
    long top;
    // A small size for testing
    size = 2;
    top = 0 - 1;
    // 3 fields
    pStack = SccMalloc(8 * 3);
    pItems = SccMalloc(size * 8);
    // set each field
    StackSetSize(pStack, size);
    StackSetTop(pStack, top);
    StackSetItems(pStack, pItems);
    return pStack;
}

// pStack->top == -1
StackIsEmpty(pStack) {
    long top;

    top = StackGetTop(pStack);
    return SccEqual(top, 0 - 1);
}

// pStack->top == pStack->size - 1
StackIsFull(pStack) {
    long size;
    long top;

    top = StackGetTop(pStack);
    size = StackGetSize(pStack);
    return SccEqual(top, size - 1);
}

StackPush(pStack, item) {
    long top;
    long items;
    long size;
    long newItems;

    top = StackGetTop(pStack);
    if (StackIsFull(pStack)) {
        //output(top);
        size = StackGetSize(pStack);
        items = StackGetItems(pStack);
        // double its size
        newItems = SccMalloc(size * 2 * 8);
        // copy existing contents
        memcpy(newItems, items, size * 8);
        // Release the old items
        SccFree(items);
        // update its size and newItems
        StackSetSize(pStack, size * 2);
        StackSetItems(pStack, newItems);
        //
        items = newItems;
    }

    // Now the stack is not full.
    // push the item
    SccWrite64(items, (top + 1) * 8, item);
    // update the stack pointer
    StackSetTop(pStack, top + 1);
}

StackPop(pStack) {
    long top;
    long items;
    long x;

    if (StackIsEmpty(pStack)) {
        exit(0 - 1);
    }

    top = StackGetTop(pStack);
    items = StackGetItems(pStack);
    x = SccRead64(items, 8 * top);
    StackSetTop(pStack, top - 1);
    return x;
}

///////////////////////////////////////////
//
//  base:   2, 8, 16
//
//  output:  "0b", "0o",  "0x"
///////////////////////////////////////////
PrintPrefix(base) {
    if (SccNotEqual(base, 10)) {
        // digit '0'
        putchar(48);
        if (SccEqual(base, 2)) {
            // 'b'
            putchar(98);
        } else if (SccEqual(base, 8)) {
            // letter 'o'
            putchar(111);
        } else if (SccEqual(base, 16)) {
            // letter 'x'
            putchar(120);
        }
    }
}

GetAbsoluteValue(x) {
    if (SccLess(x, 0))
        return 0 - x;
    else
        return x;
}

///////////////////////////////////////////
//
//  x:  >= 0
//  base:   2, 8, 10, 16
///////////////////////////////////////////
PrintInteger(x, base) {
    long pStack;
    long r;

    // if x < 0, then x = 0 - x
    x = GetAbsoluteValue(x);
    base = GetAbsoluteValue(base);

    pStack = CreateStack();

    while (SccNotEqual(x, 0)) {
        r = SccMod(x, base);
        x = x / base;
        StackPush(pStack, r);
    }
    // 0x: hex  0b: bin 0o: oct
    PrintPrefix(base);
    //
    while (SccLogicNot(StackIsEmpty(pStack))) {
        r = StackPop(pStack);
        if (SccLessEqual(r, 9)) {
            // 1 --> '1' (0x31, 49)
            // 1 + 48 == 49
            putchar(r + 48);
        } else if (SccLessEqual(r, 15)) {
            // 10 --> 'A' (0x41, 65);  11 --> 'B', ...
            // 10 + 55 == 65
            putchar(r + 55);
        } else {
            // unknown base ---> '?'
            putchar(63);
        }
    }
    ReleaseStack(pStack);

    // '\n'
    putchar(10);
}

////////////////////////////////////////////////////////

main(argc, argv, env) {
    long x;
    x = 20249024;
    output(x);
    // '\n'
    putchar(10);

    PrintInteger(x, 16);
    PrintInteger(x, 10);
    PrintInteger(x, 8);
    PrintInteger(x, 2);
    return 0;
}


